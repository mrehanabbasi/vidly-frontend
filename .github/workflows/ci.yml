name: CI

on:
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  Build-Test-and-Push-Image:
    runs-on: ubuntu-20.04
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    name: Build and Push Image to Image registry
    env:
      REGISTRY: docker.io

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout out code in workflow
        uses: actions/checkout@v2

      - name: Run application code
        run: docker-compose up -d

      - name: Test application code
        run: docker-compose run ${{ github.event.repository.name }} npm test -- --watchAll=false

      - name: Initialize Pipeline
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: "@${{ github.actor }} GitHub Actions has started building this code. Check status at 'https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks'"
          allow-repeats: false

      - name: Generate Vars
        id: generate_vars
        run: |
          # Just Tag
          IMAGE_TAG=gha-${BUILD_NUMBER}
          # Just Image name
          IMAGE_NAME=${{ github.event.repository.name }}-ci-cd
          #Image ID= Name + Tag
          IMAGE_ID=$IMAGE_NAME:$IMAGE_TAG
          IMAGE_REPO=$REGISTRY/$IMAGE_ID
          echo "Image: $IMAGE_REPO"
          echo "::set-output name=image::$IMAGE_REPO"
          echo "::set-output name=image_name::$IMAGE_NAME"
          echo "::set-output name=image_id::$IMAGE_ID"
          echo REPO=$IMAGE_NAME >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV
          echo IMAGE=$(echo "$REGISTRY/$IMAGE_ID") >> $GITHUB_ENV
          echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Echo Output
        run: |
          echo "Image from Output: ${{ steps.generate_vars.outputs.image }}"
          echo "Repo from Output: ${{ steps.generate_vars.outputs.image_name }}"
          echo "Image ID from Output: ${{ steps.generate_vars.outputs.image_id }}"
          echo "Image from Env:  ${{ env.IMAGE }}"
          echo "Repo from Env:  ${{ env.REPO }}"
          echo "Image ID from Env:  ${{ env.IMAGE_ID }}"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: true
          build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
          cache-to: type=inline
          tags: latest,${{ env.IMAGE_TAG }}
        # run: |
        #   docker tag ${DOCKERHUB_USERNAME}/${{ github.event.repository.name }}:${BUILD_NUMBER} ${{ env.REPO }}:latest
        #   docker tag ${DOCKERHUB_USERNAME}/${{ github.event.repository.name }}:${BUILD_NUMBER} ${{ env.IMAGE_ID }}
        #   docker push ${{ env.REPO }}:latest
        #   docker push ${{ env.IMAGE_ID }}

      - name: Notify Failure
        if: failure()
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: '@${{ github.actor }} The pipeline failed! You should better fix it fast! [Build](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks) has FAILED!'
          allow-repeats: false
